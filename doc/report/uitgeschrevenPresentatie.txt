----------------------------------------Slide 1----------------

Hello my name is Berend van Veenendaal.

Today I'll give my master Thesis' presentation. The subject of this presentation is: 
Codmon-VM: A Multi-platform modular test environment. The name Codmon-VM consists of
2 parts. Codmon which stands for Code Monitoring and the addition VM , which stands
for Virtual Machine. 

---------------------------------------Slide 2------------------

I'll start this presentation with a short introduction. Then I'll start with the the
original Codmon framework. I'll tell how Codmon works and why it is nog sufficient for
our purposus. After this I'll explain how Codmon-VM is designed and build followed by
How Codmon-VM works in practice. Next i'll tell someting about the testing of Codmon-VM
and finally ill discuss Codmon-VM and give my conclussion about it. After this there is 
some time left for questions, but if there are questions during the presentation feel
free to ask them.

---------------------------------------Slide 3 --------------------------- 
Ok letst start with some background information. Why was it necessary to design Codmon-VM?
These days software becomes more and more complex, So the testing of the software becomes 
more and more importand. Many of the problems of software are related to a lack of good 
testing. Often it is only tested on a single platform. Als a lot of effort is put in 
configuring the test environments. 

---------------------------------------Slide 4 --------------------------- 
 “So, one of the challenges of software testing is to make sure that the software behaves in 
 the same way on different platforms, without spending too much time on the installation and 
 configuration of the test environment on these platforms”.

---------------------------------------Slide 5 --------------------------- 
Offcourse there are already different existing test frameworks and environments available.
To test different units of Java source code there is Junit and to build your software and 
execute Unit tests there are Hudson and Jenkins available. 

---------------------------------------Slide 6 --------------------------- 
All of them have their advantages and disadvantages. With Junit it is very easy to test the
functionlity of of the different units of source code. But a problem of JUnit is that it
doesn't support out of the box performance tests. Neither can it checkout, build or deploy 
the software.

 ---------------------------------------Slide 7 --------------------------- 
When we take a look at Hudson or Jenkins, which are almost the same, we see that they have
a nice and user-friendly user interface. It can perform perfromance and deployment tests. But
although it can deal with multiple platforms it is not platform independent althought. It makes
extensivly use of shell scripts (or batch files) to execute its tasks, so it has to know in
advance on which platform it is executing its jobs. 

 ---------------------------------------Slide 8 --------------------------- 