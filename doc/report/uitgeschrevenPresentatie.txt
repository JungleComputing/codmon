----------------------------------------Slide 1----------------

Hello my name is Berend van Veenendaal.

Today I'll give my master Thesis' presentation. The subject of this presentation is: 
Codmon-VM: A Multi-platform modular test environment. The name Codmon-VM consists of
2 parts. Codmon which stands for Code Monitoring and the addition VM , which stands
for Virtual Machine. 

---------------------------------------Slide 2------------------

I'll start this presentation with a short introduction. Then I'll start with the the
original Codmon framework. I'll tell how Codmon works and why it is nog sufficient for
our purposus. After this I'll explain how Codmon-VM is designed and build followed by
How Codmon-VM works in practice. Next i'll tell someting about the testing of Codmon-VM
and finally ill discuss Codmon-VM and give my conclussion about it. After this there is 
some time left for questions, but if there are questions during the presentation feel
free to ask them.

---------------------------------------Slide 3 --------------------------- 
Ok letst start with some background information. Why was it necessary to design Codmon-VM?
These days software becomes more and more complex, So the testing of the software becomes 
more and more importand. Many of the problems of software are related to a lack of good 
testing. Often it is only tested on a single platform. Als a lot of effort is put in 
configuring the test environments. 

---------------------------------------Slide 4 --------------------------- 
 “So, one of the challenges of software testing is to make sure that the software behaves in 
 the same way on different platforms, without spending too much time on the installation and 
 configuration of the test environment on these platforms”.

---------------------------------------Slide 5 --------------------------- 
Offcourse there are already different existing test frameworks and environments available.
To test different units of Java source code there is Junit and to build your software and 
execute Unit tests there are Hudson and Jenkins available. 

---------------------------------------Slide 6 --------------------------- 
All of them have their advantages and disadvantages. With Junit it is very easy to test the
functionlity of of the different units of source code. But a problem of JUnit is that it
doesn't support out of the box performance tests. Neither can it checkout, build or deploy 
the software.

 ---------------------------------------Slide 7 --------------------------- 
When we take a look at Hudson or Jenkins, which are almost the same, we see that they have
a nice and user-friendly user interface. It can perform perfromance and deployment tests. But
although it can deal with multiple platforms it is not platform independent althought. It makes
extensivly use of shell scripts (or batch files) to execute its tasks, so it has to know in
advance on which platform it is executing its jobs. 

 ---------------------------------------Slide 8 --------------------------- 
 So the big question is: Is it possible to design a multi-platform, modular and user-friendly 
 test environment?  Later in this presentation we will answer this question.
 
---------------------------------------Slide 9 --------------------------- 
 But first things first, lets start at the beginning. As a starting point we took the Codmon
 framwork. Codon is a testframwork for testing and monitoring IBIS applications on the DAS-2
 computer and was built by Francois Lesuer in 2005.
 
---------------------------------------Slide 10 --------------------------- 
 
Codmon is able to both perform functional as well as perfromance tests. It represents its results
on a webpage and in case of an error or a drop in performance an alarm is raised. It does this by
sending an email to the last contributer of the software.

---------------------------------------Slide 11 --------------------------- 
Codmon consists of two parts.  First there is the part that controls codmon and second there is the
Codmon core program.

---------------------------------------Slide 12 --------------------------- 
This figure gives an schematic view of Codmon. On the top you can see the Codmon core program
and at the bottom the part that controls Codmon. The Controlling part is outside of codmon so it
can changed without having to reinstall Codmon.

---------------------------------------Slide 13 --------------------------- 
Let's first take a look at the part that controld Codmon. As you could see codmon is controlled bij a 
sensor, which is represented by a sensor file. This sensor file is a XML-file which consists out of
multiple serors. These sensors describe the tests that will run and the order in which they will run.
The tests itself are implemented by a wrapper. Which is a small PERL program.

---------------------------------------Slide 14 --------------------------- 
Here you can see an example of such a sensor. In this case the test is represented by a time wrapper which
meassures the time that is costs to execute the csvup. shell script. Because graph is set true also a graph
with the execution times will be generated.

---------------------------------------Slide 15 ---------------------------
Now that youve seen a little bit of the Controlling part of Codmon it's time to take a short look at
the codmon core-program. The codmon coreprogram is responsible for  executing the different sensors,
collecting and storing of the results and creating the grpahes (if necessary). It als raises an alarm
in care of a failure or a drop in the performance of a test. 

---------------------------------------Slide 16 ---------------------------
So on first sight it codmon looks quite a nice and usefull testing framework, but when we take a look
at our goal. namely designing a multi-platform, mudular and user-friendly test environment there are some
serious flaws. Lets first take a look at the multi-platform requirement. Codmon consists of different
platform dependent languages like perl scripts and shell scripts. So it is defenitely not multi-platform.

---------------------------------------Slide 17 ---------------------------
When we take a look at the modularity requirement. Codmon is built on lots of different scripts and languages
so for a user it is difficult to add new modules or tests. He must be able to deal with all those languages.
So although  it is possible to add new modules it is not working in a way that satisfies our requirements.

---------------------------------------Slide 18 ---------------------------
The last requirement was user-friendliness. As we saw on the slide before it is difficult to add new 
modules or tests to the Codmon framework. Also it requires al lot of configuraten before one is
able to run codmon. It also supports only 1 machine, namely the Das-2 and also it supports only
Ibis projects. So it's difficult to call Codmon user-friendly.

---------------------------------------Slide 19 ---------------------------
So before talking about our new solution, called Codmon-VM. lets refresh our mind and take a look
at our goal again. Our goal was to design a multi-platform, modular and user-friendly test environment.

---------------------------------------Slide 20 ---------------------------
Lets first take a look in more detail what we mean by this. Multi-platform will say that the same source,
without making any modifications,can compile and run on multiple platforms. Also the program must show
the same runtime behaviour on all the platforms.

---------------------------------------Slide 21 ---------------------------
To Achieve this we diceded to write all the modules in Java in stead of in different platform dependent 
languages. To connect a Java wrapper with a Java program that is under test we used ant. doing it this way
it is not necessary that a wrapper knows about a the program thats under test and vice versa.

---------------------------------------Slide 22 ---------------------------
Here you can see how a sensor will like if we do it this way. The cmd in a sensor will always look the same now
Java follewed by the name of the wrapper that is used followed by a relative path to a build.xml followed by the ant
target that codmon must execute. This ant target can also be a java program or a set of JUnit tests.

---------------------------------------Slide 23 ---------------------------
The second requirement was modularity. Modularity will say that it must be possible for users to easily add new
components to the Codmon-VM environment.

---------------------------------------Slide 24 ---------------------------
There are different kinds of modularity. The most obvious modules are the functional modules. examples
of these are the Start-up module, which is resposible for starting Codmon-VM and the Checkout-module, which
is responsible for dealing with the different version control systems. The checkout module itself is also
modular, which means that it it easy to built in support for other version control systems. The tests can also
been seen as modules. A user can write a new wrappes and easily use it in the sensor file. The same true for
the software that is under test.

---------------------------------------Slide 25 ---------------------------
The last requirement was User-friendliness. This means that we dont want to bother the users of the Codmon-VM 
environment with its internal mechanisms or with the configuration of the environment.

---------------------------------------Slide 26 ---------------------------
To adress this requirement we provided a set of pre-configured Codmon-VM images. So the only things a user has
to do before it can test its software are: Download one or more of these Codmon-VM images, install them in VM-ware
or in virtual box. Add the details of the software thatis to be tested to the initialization file and create a
sensor file.

---------------------------------------Slide 27 ---------------------------
Lets take a look at how this works in practice. Download and install a Codmon-VM image. Create an initialization file.
This  file contains information about the software that a user wants to test. Most important are the repository location
and the version control information.

---------------------------------------Slide 28 ---------------------------
When the initialization file is ready, it's time to create a sensor file. This sensor file describes a simplte test
that meassures the checkout time of the projects describes in the initialization file.

---------------------------------------Slide 29 ---------------------------