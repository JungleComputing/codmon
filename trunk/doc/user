CodMon : User documentation

CodMon is a framework aimed at monitoring source code, providing functionnality tests and benchmarks. If any test fails or if there is a severe dropdown in the performance, a "red light" is drown on the output (shot.xml), and a mail is sent to last commiters and heads of the team.


1- Configuration file

The configuration file, sensors.xml, has the following form :

------------------------------------------------------------
<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="style.xml"?>

<sensors project="Ibis"> 
<onoff>
<sensor id="build_ok" name="Build Ok" cmd="ant -f /home1/codmon/ibis/build.xml" scope="ibis/src" scheduled="false" graph="true" fatal="true" />
<sensor id="appsbuild_ok" name="Apps Ok" cmd="ant -f ../apps/build.xml" scope="ibis/apps" scheduled="false" graph="true" />
<sensor id="test1" name="Test 1" wrapper="outcmp_ibis" cmd="2 Main" scope="ibis/src" scheduled="false" graph="true" enabled="true"/>
</onoff>
<graph>
<sensor id="nocom" name="Nocom benchs" cmd="ant ..." scope="ibis/src" scheduled="true" />
</graph>
</sensors>
-----------------------------------------------------------

The <onoff> sensors are used for functionnality tests. They will report clearly if the test has succeeded, and will (eventually) draw a time graph. The <graph> sensors are for benchmarking. 
Attributes : (final means that you won't be able to change it later)
	- id (final) : must be unique, will be used for file naming (so, you must respect UNIX filenames conventions)
	- name (var) : a prettier name than id
	- wrapper (var) : a registered wrapper name, which will be used as the first part of the command (is only a shortcut)
	- cmd (var) : the command to be ran. Will be appended to <wrapper>, if defined
	- scope (var) : the CVS directory which should be analyzed in the case an alarm is raised
	- scheduled (var) : true|false, whether the task is to be scheduled downwards, in which case several tasks can be launched in parallel
	- graph (var) : true|flase, whether the time graph should be generated (defaults to true)
	- enabled (var) : true|false, whether the sensor is enabled. If disabled, won't be ran but will pe printed as "disabled" (defaults to true)
	- fatal (var) : true|false, whether the following tests should be executed, in case of an error (defaults to "false")

For the <graph> sensors, a "-out filename" will be appended to the command. The spawned process has to write all his output to be graphed to this file.


-----------------------------------
|          IBIS Specific          |
-----------------------------------

There is a shortcut for Ibis functionality tests, which have to be run by
outcmp_ibis_wrapper.pl (standard wrapper for Ibis functionality tests).
You can simply create a '.codmon' file in the app directory (the one
containing 'build.xml'), and add lines as follows:

--------.codmon----------------
<nbprocess> <args to ibis-prun, relative paths from 'build'>
2 `cat ../run-args` {net.gm}
-------------------------------

The {...} is a space-separated list of implementations (net.gm) to ignore for
this test.
You can add comments by '#', and disable tests by '//'. Several examples can
be found in the current ibis-apps tree.
Don't forget to add these files to the CVS :)

Sometimes, it may be useful to ignore a whole broken apps folder.
In this case, simply add the name of the directory to the 'local/ignoredirs'
file, in the codmon subdirectory.
Tests in this directory and its subdirectories will simply be ignored.

These files will be automatically parsed to generate the corresponding
'sensors.xml' part, between the <!-- Ibis Functionnalities -->
and <!-- /Ibis Functionnalities --> comments.

-----------------------------------
|          /IBIS Specific         |
-----------------------------------

2- Commands

Codmon expects each command to return an error value, 0 being that all was OK. Commands can optionnally output xml node(s) (to STDOUT for <onoff>, filename for <graph>), in the form :
<test id="myid" name="myname" value="myvalue" unit="myunit" /> 
where :
	- id (final) : must be unique and made of standard characters. will be truncated at 20 characters
	- name (var) : a prettier name than id
	- value (var) : the value
	- unit (var) : the unit of the value. should be the base unit, scale will be automatically adjusted in the SI style
You can't add new test ids after the first run of a command. If you do, they will be silently dropped.


3- A few wrapper scripts

Since CodMon is only a modular framework, you have to write wrappers to make complex actions. A few ones are provided in 'codmon/wrappers'.

time_wrapper.pl : args : <base directory> <command to be ran>
		  returns : <test id="time" name="Time" value="[exec time]" unit="s" />, and propagates the return value of the command
			<base_directory> is chdired before any action.
		
		=> Mainly used for checkout/compilation process



outcmp_wrapper.pl : args : <base_directory> <referency file> <command to be ran>
		    returns : <test id="time" name="Time" value="[exec time]" unit="s" />,
				returns 0 if there is no diff,
				returns 1 and append the diff to STDOUT if there are diffs.
			<base_directory> is chdired before any action.

		=> Mainly used for checking if results are as expected

outcmp_ibis_wrapper.pl : args : <base_directory> <nbnodes> <args>
			 returns : returns 0 if there is no diff,
				   returns 1 and append the diff to STDOUT if there are diffs.
			<directory> is chdired before any action.

		=> An Ibis shortcut for outcmp_wrapper, which is called by this script



4- Execution

cd build
java codmon.jar <config file>

     -> Should be ran by cron on a daily basis.

There is a "stats.sh" file in local/, which is to be launched by Cron. It generates the sensors.xml (from the .codmon, via libs/gather_tests.pl), and then executes Codmon.



4- Advice

Functionnal tests should be ran out of the target application tree, to check that the CVS version is OK. 'oucmp_wrapper.pl' is particulary adpated for that.
Benchmarks should be ran out of the CodMon tree, since you often need to tweak them a bit to have interesting graphs, and since their results should only reflect the target app comportment, not a change in the benchmark code. So freezing them seems better.





----------------------------------------------------

Folder hierarchy :

codmon/
	apps/       -> Ibis frozen benchmarks
	build/      -> CodMon build directory
	doc/        -> Docs
	libs/       -> External libs, xslt stylesheets
		style.xml       -> HTML stylesheet
		style_mail.xml  -> HTML mail stylesheet
		style_plain.xml -> plain text mail stylesheet
		...
	local/      -> Ibis specific scripts
	rrd/        -> RRD DB
	src/        -> Codmon source
	tmp/        -> tmp folder, for outfiles from spawned process
	wrappers/   -> misc wrappers
